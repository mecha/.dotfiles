#! /bin/env bash

if [ -z "$JOURNAL_ENC_DIR" ]; then
    echo "JOURNAL_ENC_DIR is not set"
    exit 1
fi

if [ -z "$JOURNAL_MNT_DIR" ]; then
    echo "JOURNAL_MNT_DIR is not set"
    exit 1
fi

mkdir -p "$JOURNAL_ENC_DIR"
mkdir -p "$JOURNAL_MNT_DIR"

unlock() {
    if [ "$JOURNAL_SHELL" ]; then
        return
    fi

    if [ ! -f "$JOURNAL_MNT_DIR/access.log" ]; then
        gocryptfs "$JOURNAL_ENC_DIR" "$JOURNAL_MNT_DIR" || { echo "Could not unlock journal!"; read -n 1; exit 1; }
        echo "[$(date)] $(gocryptfs --version)" >> $JOURNAL_MNT_DIR/access.log
    fi
}

lock() {
    if [ "$JOURNAL_SHELL" ]; then
        return
    fi
    fusermount -u "$JOURNAL_MNT_DIR" || echo "Could not lock journal!"
}

file_for_day() {
    if [ -z "$1" ]; then return; fi
    if [ -z "$2" ]; then return; fi
    if [ -z "$2" ]; then return; fi

    file="$JOURNAL_MNT_DIR/$1/$2/$3.md"
    if [ ! -f "$file" ]; then
        mkdir -p $(dirname "$file")
        echo "# $(date -d "$1-$2-$3 00:00" "+%d %b %Y")" > "$file"
    fi
    echo "$file"
}

file_for_today() {
    file_for_day "$(date +%Y)" "$(date +%m)" "$(date +%d)"
}

file_with_title() {
    rg "^$1\$" --files-with-matches | head -n 1
}

if [ "$1" == "" ] || [ "$1" == "open" ]; then
    if [ "$JOURNAL_SHELL" ]; then
        echo "[JOURNAL] You're already in here bro..."
        exit 1
    else
        retdir=$PWD
        unlock
        ( cd $JOURNAL_MNT_DIR && JOURNAL_SHELL=1 $SHELL; cd $PWD )
        lock
        exit 0
    fi
fi

if [ "$1" == "unlock" ]; then
    unlock
    exit 0
fi

if [ "$1" == "lock" ] || [ "$1" == "close" ]; then
    if [ "$JOURNAL_SHELL" ]; then
        echo "[JOURNAL] bro, just \`exit\` like normal wtf. killing your shell ..."
        kill -9 $PPID
        exit 1
    else
        lock
        exit 0
    fi
fi

if [ "$1" == "today" ]; then
    unlock
    $EDITOR "$(file_for_today)"
    lock
    exit 0
fi

if [ "$1" == "day" ]; then
    unlock
    $EDITOR "$(file_for_day "$2" "$3" "$4")"
    lock
    exit 0
fi

if [ "$1" == "search" ]; then
    unlock
    selected=$(rg '^# (.+)' --no-line-number --no-filename | sort -r | cut -c 3- | fzf)
    [[ -n "$selected" ]] && $EDITOR "$(file_with_title "# $selected")"
    lock
    exit 0
fi

if [ "$1" == "tag" ]; then
    unlock
    tags=$(rg '@[^\W]+' --only-matching --no-filename --no-line-number | sort | uniq)
    selected=$(echo "$tags" | fzf --prompt="Tag: ")
    if [ ! -z "$selected" ]; then
        rg "$selected" --word-regexp --vimgrep | sort | nvim -q - '+copen' '+cc'
    fi
    lock
    exit 0
fi

if [ "$1" == "tags" ]; then
    unlock
    rg '@[^\W]+' --only-matching --no-filename --no-line-number | sort | uniq
    lock
    exit 0
fi

if [ "$1" == "run" ]; then
    shift
    if [ "$JOURNAL_SHELL" ]; then
        exec $@
        exit 1
    else
        unlock
        JOURNAL_SHELL=1 $@
        lock
        exit 0
    fi
fi

if [ "$1" == "log" ]; then
    unlock
    less "$JOURNAL_MNT_DIR/access.log"
    lock
fi

if [ "$1" == "help" ]; then
    self=$(basename "$0")
    echo "Encrypted journal helper script"
    echo
    echo "USAGE"
    echo
    echo "    $self [COMMAND [ARGUMENTS...]]"
    echo
    echo "COMMANDS"
    echo
    echo "    open            [default] Opens a shell inside the journal."
    echo "    unlock          Unlocks the journal."
    echo "    lock, close     Locks the journal, killing the shell if the journal is open."
    echo "    today           Opens today's page."
    echo "    day             Opens the page for a specific day. Takes the year, month, and day as arguments."
    echo "    search          Search for a page via the date title string."
    echo "    tag             Search for all occurences of a tag and open them in Neovim."
    echo "    tags            List all tags found in the journal."
    echo "    run             Runs a command inside the journal."
    echo "    run             Runs a command inside the journal."
    echo "    log             Prints the access log."
    echo
    echo "NOTES"
    echo
    echo "Most commands require the journal to be unlocked. If already inside 'journal open', nothing happens. Otherwise, the journal will be unlocked and then re-locked once the command has finished."
    exit 0
fi

echo "unknown command: $1"
exit 1
