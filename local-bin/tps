#! /bin/env bash
# My version of tps, adapted from ThePrimegen's script:
# https://github.com/ThePrimeagen/.dotfiles/blob/master/bin/.local/scripts/tmux-sessionizer"

main() {
    new="  New project"
    clone="  Clone git repo"
    main="󰧨  Main session"
    dotfiles="󱁤  .dotfiles"

    path=$1
    if [ -n "$path" ]; then
        open_proj "$path"
        return
    fi

    dirs="$(fd . "$DEV_PATH" --hidden --min-depth 2 --max-depth 3 --type d | sed "s|^$DEV_PATH/||")"
    choices="$(printf "%s\n%s\n%s\n%s\n%s" "$new" "$clone" "$main" "$dotfiles" "$dirs" )"
    path="$(echo "$choices" | fzf --style full --prompt 'Project: ')"

    if [ -z "$path" ]; then
        exit 1
    elif [[ "$path" == "$new" ]]; then
        create_proj
    elif [[ "$path" == "$clone" ]]; then
        clone_proj
    elif [[ "$path" == "$main" ]]; then
        tmux switch-client -t main
    elif [[ "$path" == "$dotfiles" ]]; then
        open_proj "$HOME/.dotfiles"
    else
        open_proj "$DEV_PATH/$path"
    fi
}

# opens or switches to a project session
# @param $path string
open_proj() {
    path=$1
    path_name=$(basename "$path" | tr . _)

    tmux_running=$(pgrep tmux)
    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        tmux new-session -s $path_name -c $path
        exit 0
    fi

    if ! tmux has-session -t=$path_name 2> /dev/null; then
        tmux new-session -ds $path_name -c $path
    fi

    tmux switch-client -t $path_name

    if [ -f "$path/.project" ]; then
        pushd $path &> /dev/null
        exec "$path/.project"
        popd &> /dev/null
    fi
}

# Clones a git repo and opens its tmux session.
clone_proj() {
    read -p "Repository URL: " url
    name=$(basename $url .git)

    dir="$(fd . "$DEV_PATH" --max-depth 3 --type d | fzf --header "Select clone location")"
    path="$dir/$name"

    git clone "$url" "$path"

    if [[ $? -ne 0 && ! -d "$path" ]]; then
        echo "Failed to clone."
        read -n 1
        exit 1
    fi

    open_proj "$path"
    tmux send-keys -t "${name}:1.1" "nvim README.md" Enter
}

# Creates a new project interactively and opens its tmux session.
create_proj() {
    echo
    gum style --foreground "$VIRID_MINT" --bold '  NEW PROJECT  '
    echo

    echo -n "  {{ Foreground \"$VIRID_WHITE\" ( Bold \"  Name: \" ) }} " | gum format -t template
    read -r name
    if [[ -z "$name" ]]; then
        exit 0
    fi

    path="$(fd . "$DEV_PATH" --max-depth 1 --type d | fzf --reverse --height 12 --prompt "  Location: ")"
    if [[ -z "$path" ]]; then
        exit 0
    fi
    path="$path$name"

    echo -n "  {{ Foreground \"$VIRID_WHITE\" ( Bold \"  Location: \" ) }} " | gum format -t template
    echo $path

    mkdir -p "$DEV_PATH/templates"
    template="$(fd . "$DEV_PATH/templates" --max-depth 1 --type f --format {/} | fzf --reverse --prompt "  Template: " --height 10)"

    echo -n "  {{ Foreground \"$VIRID_WHITE\" ( Bold \"  Template: \" ) }} " | gum format -t template
    echo ${template:="<NONE>"}
    echo

    if ! gum confirm "Create project?" --padding="0 1" --no-show-help --prompt.foreground="$VIRID_ORANGE" --selected.foreground="$VIRID_DARK" --selected.background="$VIRID_MINT"; then
        exit 0
    fi

    if [[ ! -d "$path" ]]; then
        mkdir -p "$path"
        cd "$path" && git init -q -b main
    fi

    if [[ -n "$template" ]]; then
        cd "$path" && bash "$DEV_PATH/templates/$template"
    fi

    open_proj "$path"
}

main $@
